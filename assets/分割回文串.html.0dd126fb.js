import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as p,c as e,b as n,d as o,e as s,a as c,r as i}from"./app.b03401c5.js";const l={},u=n("h1",{id:"\u5206\u5272\u56DE\u6587\u4E32",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5206\u5272\u56DE\u6587\u4E32","aria-hidden":"true"},"#"),s(" \u5206\u5272\u56DE\u6587\u4E32")],-1),r=n("p",null,"\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 s\uFF0C\u8BF7\u4F60\u5C06 s \u5206\u5272\u6210\u4E00\u4E9B\u5B50\u4E32\uFF0C\u4F7F\u6BCF\u4E2A\u5B50\u4E32\u90FD\u662F \u56DE\u6587\u4E32 \u3002\u8FD4\u56DE s \u6240\u6709\u53EF\u80FD\u7684\u5206\u5272\u65B9\u6848\u3002",-1),k=n("p",null,"\u56DE\u6587\u4E32 \u662F\u6B63\u7740\u8BFB\u548C\u53CD\u7740\u8BFB\u90FD\u4E00\u6837\u7684\u5B57\u7B26\u4E32\u3002",-1),d={href:"https://leetcode.cn/problems/palindrome-partitioning/description/",target:"_blank",rel:"noopener noreferrer"},v=s("\u94FE\u63A5"),m=c(`<p>\u9012\u5F52\u51FD\u6570\u53C2\u6570</p><p>\u5168\u5C40\u53D8\u91CF\u6570\u7EC4 path \u5B58\u653E\u5207\u5272\u540E\u56DE\u6587\u7684\u5B50\u4E32\uFF0C\u4E8C\u7EF4\u6570\u7EC4 result \u5B58\u653E\u7ED3\u679C\u96C6\u3002 \uFF08\u8FD9\u4E24\u4E2A\u53C2\u6570\u53EF\u4EE5\u653E\u5230\u51FD\u6570\u53C2\u6570\u91CC\uFF09</p><p>\u672C\u9898\u9012\u5F52\u51FD\u6570\u53C2\u6570\u8FD8\u9700\u8981 startIndex\uFF0C\u56E0\u4E3A\u5207\u5272\u8FC7\u7684\u5730\u65B9\uFF0C\u4E0D\u80FD\u91CD\u590D\u5207\u5272\uFF0C\u548C\u7EC4\u5408\u95EE\u9898\u4E5F\u662F\u4FDD\u6301\u4E00\u81F4\u7684</p><p>\u5207\u5272\u7EBF\u5207\u5230\u4E86\u5B57\u7B26\u4E32\u6700\u540E\u9762\uFF0C\u8BF4\u660E\u627E\u5230\u4E86\u4E00\u79CD\u5207\u5272\u65B9\u6CD5\uFF0C\u6B64\u65F6\u5C31\u662F\u672C\u5C42\u9012\u5F52\u7684\u7EC8\u6B62\u6761\u4EF6\u3002</p><p>\u5728\u5904\u7406\u7EC4\u5408\u95EE\u9898\u7684\u65F6\u5019\uFF0C\u9012\u5F52\u53C2\u6570\u9700\u8981\u4F20\u5165 startIndex\uFF0C\u8868\u793A\u4E0B\u4E00\u8F6E\u9012\u5F52\u904D\u5386\u7684\u8D77\u59CB\u4F4D\u7F6E\uFF0C\u8FD9\u4E2A startIndex \u5C31\u662F\u5207\u5272\u7EBF\u3002</p><p>\u5728\u9012\u5F52\u5FAA\u73AF\u4E2D\u5982\u4F55\u622A\u53D6\u5B50\u4E32</p><p>\u5728 for (int i = startIndex; i &lt; s.size(); i++)\u5FAA\u73AF\u4E2D\uFF0C\u6211\u4EEC \u5B9A\u4E49\u4E86\u8D77\u59CB\u4F4D\u7F6E startIndex\uFF0C\u90A3\u4E48 [startIndex, i] \u5C31\u662F\u8981\u622A\u53D6\u7684\u5B50\u4E32\u3002</p><p>\u9996\u5148\u5224\u65AD\u8FD9\u4E2A\u5B50\u4E32\u662F\u4E0D\u662F\u56DE\u6587\uFF0C\u5982\u679C\u662F\u56DE\u6587\uFF0C\u5C31\u52A0\u5165\u5728 path \u4E2D\uFF0Cpath \u7528\u6765\u8BB0\u5F55\u5207\u5272\u8FC7\u7684\u56DE\u6587\u5B50\u4E32\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">backtrace</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//\u5224\u65AD\u56DE\u6587\u5B50\u4E32</span>
<span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function b(f,_){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,r,k,n("p",null,[n("a",d,[v,o(a)])]),m])}var w=t(l,[["render",b],["__file","\u5206\u5272\u56DE\u6587\u4E32.html.vue"]]);export{w as default};
