import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c,b as n,d as p,e as s,a as t,r as u}from"./app.b03401c5.js";const l={},i=n("h1",{id:"\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u6570\u7EC4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u6570\u7EC4","aria-hidden":"true"},"#"),s(" \u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u6570\u7EC4")],-1),k=n("h2",{id:"_1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1","aria-hidden":"true"},"#"),s(" 1")],-1),r={href:"https://leetcode.cn/problems/merge-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},d=s("\u94FE\u63A5"),m=t(`<p>\u7ED9\u4F60\u4E24\u4E2A\u6309 \u975E\u9012\u51CF\u987A\u5E8F \u6392\u5217\u7684\u6574\u6570\u6570\u7EC4 nums1 \u548C nums2\uFF0C\u53E6\u6709\u4E24\u4E2A\u6574\u6570 m \u548C n \uFF0C\u5206\u522B\u8868\u793A nums1 \u548C nums2 \u4E2D\u7684\u5143\u7D20\u6570\u76EE\u3002</p><p>\u8BF7\u4F60 \u5408\u5E76 nums2 \u5230 nums1 \u4E2D\uFF0C\u4F7F\u5408\u5E76\u540E\u7684\u6570\u7EC4\u540C\u6837\u6309 \u975E\u9012\u51CF\u987A\u5E8F \u6392\u5217\u3002</p><p>\u6CE8\u610F\uFF1A\u6700\u7EC8\uFF0C\u5408\u5E76\u540E\u6570\u7EC4\u4E0D\u5E94\u7531\u51FD\u6570\u8FD4\u56DE\uFF0C\u800C\u662F\u5B58\u50A8\u5728\u6570\u7EC4 nums1 \u4E2D\u3002\u4E3A\u4E86\u5E94\u5BF9\u8FD9\u79CD\u60C5\u51B5\uFF0Cnums1 \u7684\u521D\u59CB\u957F\u5EA6\u4E3A m + n\uFF0C\u5176\u4E2D\u524D m \u4E2A\u5143\u7D20\u8868\u793A\u5E94\u5408\u5E76\u7684\u5143\u7D20\uFF0C\u540E n \u4E2A\u5143\u7D20\u4E3A 0 \uFF0C\u5E94\u5FFD\u7565\u3002nums2 \u7684\u957F\u5EA6\u4E3A n \u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2</h2><p>\u7ED9\u51FA\u4E00\u4E2A\u6709\u5E8F\u7684\u6574\u6570\u6570\u7EC4 A \u548C\u6709\u5E8F\u7684\u6574\u6570\u6570\u7EC4 B \uFF0C\u8BF7\u5C06\u6570\u7EC4 B \u5408\u5E76\u5230\u6570\u7EC4 A \u4E2D\uFF0C\u53D8\u6210\u4E00\u4E2A\u6709\u5E8F\u7684\u5347\u5E8F\u6570\u7EC4</p><p>\u4FDD\u8BC1 A \u6570\u7EC4\u6709\u8DB3\u591F\u7684\u7A7A\u95F4\u5B58\u653E B \u6570\u7EC4\u7684\u5143\u7D20\uFF0C A \u548C B \u4E2D\u521D\u59CB\u7684\u5143\u7D20\u6570\u76EE\u5206\u522B\u4E3A m \u548C n\uFF0CA\u7684\u6570\u7EC4\u7A7A\u95F4\u5927\u5C0F\u4E3A m+n</p><p>\u4E0D\u8FD4\u56DE\u5408\u5E76\u7684\u6570\u7EC4\uFF0C\u5C06\u6570\u7EC4 B \u7684\u6570\u636E\u5408\u5E76\u5230 A \u91CC\u9762\u5C31\u597D\u4E86</p>`,8),v={href:"https://www.nowcoder.com/practice/89865d4375634fc484f3a24b7fe65665?tpId=295&tqId=658&ru=%2Fpractice%2Fd8b6b4358f774294a89de2a6ac4d9337&qru=%2Fta%2Fformat-top101%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany",target:"_blank",rel:"noopener noreferrer"},b=s("\u94FE\u63A5"),_=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> n</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// write code here</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token constant">B</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token constant">B</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function h(f,w){const a=u("ExternalLinkIcon");return e(),c("div",null,[i,k,n("p",null,[n("a",r,[d,p(a)])]),m,n("p",null,[n("a",v,[b,p(a)])]),_])}var g=o(l,[["render",h],["__file","\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u6570\u7EC4.html.vue"]]);export{g as default};
