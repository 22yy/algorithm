import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as e,b as n,d as o,e as s,a as c,r as l}from"./app.b3fe8dd3.js";const i={},u=n("h1",{id:"\u6700\u957F\u8FDE\u7EED\u9012\u589E\u5B50\u5E8F\u5217",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6700\u957F\u8FDE\u7EED\u9012\u589E\u5B50\u5E8F\u5217","aria-hidden":"true"},"#"),s(" \u6700\u957F\u8FDE\u7EED\u9012\u589E\u5B50\u5E8F\u5217")],-1),r={href:"https://leetcode.cn/problems/longest-continuous-increasing-subsequence/description/",target:"_blank",rel:"noopener noreferrer"},k=s("\u94FE\u63A5"),d=c(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u672A\u7ECF\u6392\u5E8F\u7684\u6574\u6570\u6570\u7EC4\uFF0C\u627E\u5230\u6700\u957F\u4E14 \u8FDE\u7EED\u9012\u589E \u7684\u5B50\u5E8F\u5217\uFF0C\u5E76\u8FD4\u56DE\u8BE5\u5E8F\u5217\u7684\u957F\u5EA6\u3002</p><p>\u8FDE\u7EED\u9012\u589E\u7684\u5B50\u5E8F\u5217 \u53EF\u4EE5\u7531\u4E24\u4E2A\u4E0B\u6807 l \u548C r\uFF08l &lt; r\uFF09\u786E\u5B9A\uFF0C\u5982\u679C\u5BF9\u4E8E\u6BCF\u4E2A l &lt;= i &lt; r\uFF0C\u90FD\u6709 nums[i] &lt; nums[i + 1] \uFF0C\u90A3\u4E48\u5B50\u5E8F\u5217 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] \u5C31\u662F\u8FDE\u7EED\u9012\u589E\u5B50\u5E8F\u5217\u3002</p><p><b>\u52A8\u6001\u89C4\u5212</b></p><ol><li>dp[i] \u5B9A\u4E49</li></ol><p>dp[i] \u8868\u793A\u4E0B\u6807i\u7ED3\u5C3E\u7684\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6</p><ol start="2"><li>\u9012\u63A8\u516C\u5F0F</li></ol><p>\u5982\u679C nums[i] &gt; nums[i - 1]\uFF0C\u90A3\u4E48\u4EE5 i \u4E3A\u7ED3\u5C3E\u7684\u8FDE\u7EED\u9012\u589E\u7684\u5B50\u5E8F\u5217\u957F\u5EA6 \u4E00\u5B9A\u7B49\u4E8E \u4EE5i - 1\u4E3A\u7ED3\u5C3E\u7684\u8FDE\u7EED\u9012\u589E\u7684\u5B50\u5E8F\u5217\u957F\u5EA6 + 1 \u3002</p><ol start="3"><li>\u521D\u59CB\u5316</li></ol><p>\u957F\u5EA6\u81F3\u5C11\u4E3A1</p><ol start="4"><li>\u904D\u5386\u987A\u5E8F</li></ol><p>\u4ECE\u9012\u63A8\u516C\u5F0F\u4E0A\u53EF\u4EE5\u770B\u51FA\uFF0C dp[i + 1]\u4F9D\u8D56dp[i]\uFF0C\u6240\u4EE5\u4E00\u5B9A\u662F\u4ECE\u524D\u5411\u540E\u904D\u5386\u3002</p><ol start="5"><li>\u63A8\u5BFC</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">findLengthOfLCIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><b>\u8D2A\u5FC3</b></p><p>\u9047\u5230nums[i] &gt; nums[i - 1]\u65F6\uFF0C count++; \u5426\u5219\u4ECE\u5934\u5F00\u59CB\u8BA1\u6570\uFF0C \u8BB0\u5F55count\u6700\u5927\u503C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">findLengthOfLCIS</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           count<span class="token operator">++</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//\u4E0D\u8FDE\u7EED\uFF0C\u4ECE\u5934\u5F00\u59CB</span>
       <span class="token punctuation">}</span>
       res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function m(v,b){const a=l("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[k,o(a)])]),d])}var h=p(i,[["render",m],["__file","\u6700\u957F\u8FDE\u7EED\u9012\u589E\u5B50\u5E8F\u5217.html.vue"]]);export{h as default};
