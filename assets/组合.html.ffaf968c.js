import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c,b as n,d as t,e as s,a as p,r as i}from"./app.b03401c5.js";const u={},l=n("h1",{id:"\u7EC4\u5408",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7EC4\u5408","aria-hidden":"true"},"#"),s(" \u7EC4\u5408")],-1),k=n("h2",{id:"\u7EC4\u5408-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7EC4\u5408-1","aria-hidden":"true"},"#"),s(" \u7EC4\u5408")],-1),r=n("p",null,"\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570 n \u548C k\uFF0C\u8FD4\u56DE\u8303\u56F4 [1, n] \u4E2D\u6240\u6709\u53EF\u80FD\u7684 k \u4E2A\u6570\u7684\u7EC4\u5408\u3002",-1),d=n("p",null,"\u4F60\u53EF\u4EE5\u6309 \u4EFB\u4F55\u987A\u5E8F \u8FD4\u56DE\u7B54\u6848\u3002",-1),v={href:"https://leetcode.cn/problems/combinations/description/",target:"_blank",rel:"noopener noreferrer"},m=s("lianjie"),b=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u7ED3\u679C\u7684\u96C6\u5408</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u7B26\u5408\u6761\u4EF6\u7684\u7ED3\u679C</span>
<span class="token keyword">var</span> <span class="token function-variable function">combine</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">combineHelper</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">combineHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//\u5982\u679Cfor\u5FAA\u73AF\u9009\u62E9\u7684\u8D77\u59CB\u4F4D\u7F6E\u4E4B\u540E\u7684\u5143\u7D20\u4E2A\u6570 \u5DF2\u7ECF\u4E0D\u8DB3 \u6211\u4EEC\u9700\u8981\u7684\u5143\u7D20\u4E2A\u6570\u4E86\uFF0C\u90A3\u4E48\u5C31\u6CA1\u6709\u5FC5\u8981\u641C\u7D22\u4E86\u3002</span>
  <span class="token comment">//\u4EE3\u7801\u4E2Di\uFF0C\u5C31\u662Ffor\u5FAA\u73AF\u91CC\u9009\u62E9\u7684\u8D77\u59CB\u4F4D\u7F6E\u3002</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">combineHelper</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5DF2\u7ECF\u9009\u62E9\u7684\u5143\u7D20\u4E2A\u6570\uFF1Apath.size();</p><p>\u8FD8\u9700\u8981\u7684\u5143\u7D20\u4E2A\u6570\u4E3A: k - path.size();</p><p>\u5728\u96C6\u5408 n \u4E2D\u81F3\u591A\u8981\u4ECE\u8BE5\u8D77\u59CB\u4F4D\u7F6E : n - (k - path.size()) + 1\uFF0C\u5F00\u59CB\u904D\u5386</p><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF0Cn = 4\uFF0Ck = 3\uFF0C \u76EE\u524D\u5DF2\u7ECF\u9009\u53D6\u7684\u5143\u7D20\u4E3A 0\uFF08path.size \u4E3A 0\uFF09\uFF0Cn - (k - 0) + 1 \u5373 4 - ( 3 - 0) + 1 = 2\u3002</p><p>\u4ECE 2 \u5F00\u59CB\u641C\u7D22\u90FD\u662F\u5408\u7406\u7684\uFF0C\u53EF\u4EE5\u662F\u7EC4\u5408[2, 3, 4]\u3002</p><h2 id="\u7EC4\u5408\u603B\u548C" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u603B\u548C" aria-hidden="true">#</a> \u7EC4\u5408\u603B\u548C</h2><p>\u7ED9\u4F60\u4E00\u4E2A \u65E0\u91CD\u590D\u5143\u7D20 \u7684\u6574\u6570\u6570\u7EC4 candidates \u548C\u4E00\u4E2A\u76EE\u6807\u6574\u6570 target \uFF0C\u627E\u51FA candidates \u4E2D\u53EF\u4EE5\u4F7F\u6570\u5B57\u548C\u4E3A\u76EE\u6807\u6570 target \u7684 \u6240\u6709 \u4E0D\u540C\u7EC4\u5408 \uFF0C\u5E76\u4EE5\u5217\u8868\u5F62\u5F0F\u8FD4\u56DE\u3002\u4F60\u53EF\u4EE5\u6309 \u4EFB\u610F\u987A\u5E8F \u8FD4\u56DE\u8FD9\u4E9B\u7EC4\u5408\u3002</p><p>candidates \u4E2D\u7684 \u540C\u4E00\u4E2A \u6570\u5B57\u53EF\u4EE5 \u65E0\u9650\u5236\u91CD\u590D\u88AB\u9009\u53D6 \u3002\u5982\u679C\u81F3\u5C11\u4E00\u4E2A\u6570\u5B57\u7684\u88AB\u9009\u6570\u91CF\u4E0D\u540C\uFF0C\u5219\u4E24\u79CD\u7EC4\u5408\u662F\u4E0D\u540C\u7684\u3002</p><p>\u5BF9\u4E8E\u7ED9\u5B9A\u7684\u8F93\u5165\uFF0C\u4FDD\u8BC1\u548C\u4E3A target \u7684\u4E0D\u540C\u7EC4\u5408\u6570\u5C11\u4E8E 150 \u4E2A\u3002</p>`,10),h={href:"https://leetcode.cn/problems/combination-sum/description/",target:"_blank",rel:"noopener noreferrer"},f=s("\u94FE\u63A5"),g=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">backtraking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">backtraking</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> target<span class="token punctuation">,</span> startindex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u526A\u679D\uFF1A \u5BF9\u603B\u96C6\u5408\u6392\u5E8F\u4E4B\u540E\uFF0C\u5982\u679C\u4E0B\u4E00\u5C42\u7684sum\uFF08\u5C31\u662F\u672C\u5C42\u7684 sum + candidates[i]\uFF09\u5DF2\u7ECF\u5927\u4E8Etarget\uFF0C\u5C31\u53EF\u4EE5\u7ED3\u675F\u672C\u8F6Efor\u5FAA\u73AF\u7684\u904D\u5386\u3002</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>
      <span class="token keyword">let</span> i <span class="token operator">=</span> startindex<span class="token punctuation">;</span>
      i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">backtraking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0D\u7528i+1\u4E86\uFF0C\u8868\u793A\u53EF\u4EE5\u91CD\u590D\u8BFB\u53D6\u5F53\u524D\u7684\u6570</span>
      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7EC4\u5408\u603B\u548C-ii" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u603B\u548C-ii" aria-hidden="true">#</a> \u7EC4\u5408\u603B\u548C II</h2><p>\u7ED9\u5B9A\u4E00\u4E2A\u5019\u9009\u4EBA\u7F16\u53F7\u7684\u96C6\u5408 candidates \u548C\u4E00\u4E2A\u76EE\u6807\u6570 target \uFF0C\u627E\u51FA candidates \u4E2D\u6240\u6709\u53EF\u4EE5\u4F7F\u6570\u5B57\u548C\u4E3A target \u7684\u7EC4\u5408\u3002</p><p>candidates \u4E2D\u7684\u6BCF\u4E2A\u6570\u5B57\u5728\u6BCF\u4E2A\u7EC4\u5408\u4E2D\u53EA\u80FD\u4F7F\u7528 \u4E00\u6B21 \u3002</p><p>\u6CE8\u610F\uFF1A\u89E3\u96C6\u4E0D\u80FD\u5305\u542B\u91CD\u590D\u7684\u7EC4\u5408\u3002</p>`,5),_={href:"https://leetcode.cn/problems/combination-sum-ii/description/",target:"_blank",rel:"noopener noreferrer"},w=s("\u94FE\u63A5"),y=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// \u9996\u5148\u628A\u7ED9candidates\u6392\u5E8F\uFF0C\u8BA9\u5176\u76F8\u540C\u7684\u5143\u7D20\u90FD\u6328\u5728\u4E00\u8D77\u3002</span>
  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> candidates<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> target<span class="token punctuation">,</span> candidates<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>
      <span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span>
      i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8981\u5BF9\u540C\u4E00\u6811\u5C42\u4F7F\u7528\u8FC7\u7684\u5143\u7D20\u8FDB\u884C\u8DF3\u8FC7</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> candidates<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> target<span class="token punctuation">,</span> candidates<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7EC4\u5408\u603B\u548C-iii" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408\u603B\u548C-iii" aria-hidden="true">#</a> \u7EC4\u5408\u603B\u548C III</h2><p>\u627E\u51FA\u6240\u6709\u76F8\u52A0\u4E4B\u548C\u4E3A n \u7684 k \u4E2A\u6570\u7684\u7EC4\u5408\uFF0C\u4E14\u6EE1\u8DB3\u4E0B\u5217\u6761\u4EF6\uFF1A</p><p>\u53EA\u4F7F\u7528\u6570\u5B57 1 \u5230 9 \u6BCF\u4E2A\u6570\u5B57 \u6700\u591A\u4F7F\u7528\u4E00\u6B21 \u8FD4\u56DE \u6240\u6709\u53EF\u80FD\u7684\u6709\u6548\u7EC4\u5408\u7684\u5217\u8868 \u3002\u8BE5\u5217\u8868\u4E0D\u80FD\u5305\u542B\u76F8\u540C\u7684\u7EC4\u5408\u4E24\u6B21\uFF0C\u7EC4\u5408\u53EF\u4EE5\u4EE5\u4EFB\u4F55\u987A\u5E8F\u8FD4\u56DE\u3002</p>`,4),x={href:"https://leetcode.cn/problems/combination-sum-iii/",target:"_blank",rel:"noopener noreferrer"},I=s("\u94FE\u63A5"),j=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">combinationSum3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">startIndex<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sum <span class="token operator">-=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function S(z,N){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,k,r,d,n("p",null,[n("a",v,[m,t(a)])]),b,n("p",null,[n("a",h,[f,t(a)])]),g,n("p",null,[n("a",_,[w,t(a)])]),y,n("p",null,[n("a",x,[I,t(a)])]),j])}var E=e(u,[["render",S],["__file","\u7EC4\u5408.html.vue"]]);export{E as default};
